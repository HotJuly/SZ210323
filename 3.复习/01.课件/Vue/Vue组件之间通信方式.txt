1.props
	使用场景:父子组件之间传参
	父传子:
		1.父组件给子组件标签添加标签属性和属性值
		2.子组件通过配置对象,声明props属性,即可接收
	子传父:
		子传父是基于父传子的流程
		1.父组件在自己的methods中定义函数(该函数会被Vue修改this指向,this指向为当前父组件)
		2.父组件给子组件标签添加标签属性和属性值,属性值就是这个函数
		3.子组件通过配置对象,声明props属性,即可接收到函数
		4.子组件调用父组件传下来的函数,并传入实参(this.msg=实参)

2.provide/inject
	使用场景:祖孙组件之间传参
	祖先组件:
		在配置对象中,书写provide属性,属性值为对象
	后代组件:
		在配置对象中,书写inject属性,属性值为数组,数组中的每一项数据想要接受的provide属性名即可
	
	注意点:
		1.inject查找属性,是沿着组件链,逆向查找,直到找到根组件为止
		2.默认provide暴露的数据不是响应式的,如果需要响应式效果,需要自己手动创建响应式对象
		

3.自定义事件
	v-model="msg"
		对input标签使用
			双向数据绑定(Vue是一个伪双向数据流的框架)
			1.将msg属性的值作为默认值显示在input框内部
    				<input type="text" :value="msg"/>
			2.当input框内部数据发生变化,会同步修改data状态中的msg属性(默认绑定的是input事件)
    				<input type="text" @input="event=>msg=event.target.value"/>
		对组件使用
			1.将msg属性的值作为标签属性,传递给子组件,子组件可以通过props接收,默认属性名value
    				<HelloWorld :value="msg"/>
			2.父组件会给子组件绑定自定义事件,默认事件名称input

			可以通过model自定义v-model传参的属性名和事件名

	$on,$once,$off,$emit
	.sync 修饰符
			<HelloWorld :msg12.sync="msg"/>
			1.将msg属性的值作为标签属性,传递给子组件,子组件可以通过props接收,默认属性名msg12
    				<HelloWorld :msg12="msg"/>
			2.父组件会给子组件绑定自定义事件,默认事件名称update:msg12
	全局事件总线
		

4.找到对应组件实例
	$parent->通过该属性,可以直接找到父组件的实例对象
	$root->可以获取到Root组件的实例对象
	$children->可以获取到子组件组成的数组,注意该数组的排列顺序不会影响到页面的组件显示顺序
	$refs->
		给标签或者组件添加标签属性ref,在$refs对象上可以找到对应的ref以及数据
		对标签使用->获取到对应的真实DOM节点
		对组件使用->获取到对应的组件实例对象

5.$attrs和$listeners
	$attrs->用于接收父组件传递的标签属性,同时没被props接收的剩余内容(类似于函数的剩余参数概念)
	$listeners->用于收集当前组件身上的所有自定义事件